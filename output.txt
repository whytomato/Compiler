INTTK int
IDENFR global_var
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR n
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR double_n
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR ident
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR n2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR double_n2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR func
LPARENT (
RPARENT )
LBRACE {
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR l
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
IDENFR double_n2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 2
SEMICN ;
IDENFR y
ASSIGN =
IDENFR y
PLUS +
INTCON 1
SEMICN ;
IDENFR y
ASSIGN =
IDENFR double_n2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
SEMICN ;
SEMICN ;
IDENFR y
ASSIGN =
IDENFR y
MINU -
INTCON 1
SEMICN ;
IDENFR y
ASSIGN =
IDENFR y
MINU -
IDENFR y
SEMICN ;
INTTK int
IDENFR n3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR double_n3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR ident
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR n4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR double_n4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
IDENFR n4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR double_n4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR a
PLUS +
IDENFR n4
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
SEMICN ;
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR n2
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IDENFR y
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR y
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR y
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 2
PLUS +
INTCON 1
GEQ >=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
AND &&
INTCON 1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 1
OR ||
INTCON 2
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR j
GRE >
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR p
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR p
LEQ <=
INTCON 5
SEMICN ;
IDENFR p
ASSIGN =
IDENFR p
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 3
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
INTCON 2
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR p
ASSIGN =
IDENFR p
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR p
ASSIGN =
INTCON 2
MULT *
LPARENT (
IDENFR p
PLUS +
INTCON 1
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR n
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MINU -
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR n
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR h
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR o
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 2
COMMA ,
IDENFR e
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373213"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n%d\n"
COMMA ,
IDENFR global_var
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR global_var
RPARENT )
SEMICN ;
IDENFR func
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func5
LPARENT (
IDENFR a
MULT *
IDENFR c
RPARENT )
PLUS +
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func5
LPARENT (
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func2
LPARENT (
IDENFR a
MULT *
IDENFR c
PLUS +
IDENFR d
MOD %
IDENFR c
PLUS +
IDENFR c
DIV /
IDENFR d
MINU -
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n2
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR double_n2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func3
LPARENT (
IDENFR c
COMMA ,
IDENFR n2
COMMA ,
IDENFR double_n2
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
